#!/bin/bash

# this script should be run with admin (root) rights
# it is as simple and short as possible

secretConf=/etc/el-backup/secret.conf # contains gpg password
publicConf=/etc/el-backup/public.conf # should be readable by non-root users

# reading config files
if ! [ -f $secretConf ]; then
    echo "refuse to start because config file $secretConf does not exist"
    exit -1
fi

if ! [ -f $publicConf ]; then
    echo "refuse to start because config file $publicConf does not exist"
    exit -1
fi

. /usr/local/bin/el-backup/common.sh
readConf $secretConf password remoteDir users sysFiles
readConf $publicConf localDir maxMicro maxMeso # these variables will be read by elisp as well

if ! [ -d ${localDir} ]; then
    echo "refuse to start because local backup directory ${localDir} (defined in $publicConf) does not exist"
    exit -1
fi

PBD=${localDir}backup.version
lock=${localDir}lock

#################
# This code is for system configuration files; all of them are nicely named, so
# we do not need cumbersome quoting or "-print0" argument for "find"
function process_object {
local files
if [ -f $1 ]
then
    collect $localDir ${MMM} $1
elif [ -d $1 ]
then
    echo "exploring directory $1"
    newFiles=`find $1 -type f -cnewer ${previousArchive}`
    collect $localDir ${MMM} $newFiles
    if ! [ -z $2 ]; then # if it is major release
	echo "*this is major release*"
	if [ -f ${localDir}${MMM}/previous ]; then
	    newNames=`find $1 -type f -print | grep -Fxvf ${localDir}${MMM}/previous`
	else
	    echo "error: there is no file ${localDir}${MMM}/previous"
	    newNames=`find $1 -type f -print`
	fi
	if [ -n "$newNames" ]; then
	    echo "creating ${localDir}${MMM}/new"
	    echo $newNames >> ${localDir}${MMM}/new
	    collect $localDir ${MMM} $newNames
	fi
    fi
fi
}
################# locking the directory
if `mkdir ${lock}`; then
# checking if this is the very first backup:
if ! [ -f ${PBD} ]
then
    echo "this is the very first backup"
    echo "0 0 0" > ${PBD}
    touch -d "1980-01-01" ${PBD}
    previousArchive=${PBD}
    micro=0
    meso=0
    macro=0
else
# using three previously saved version numbers:
vvv=$(<${PBD})
vvv=($vvv)
macro=${vvv[0]}
meso=${vvv[1]}
micro=${vvv[2]}

echo "The previous archive level was ${macro}-${meso}-${micro}"

# evaluating new (3-digit) version and cleaning obsolete archives:

prevMicro=$micro
prevMeso=$meso
prevMacro=$macro

MMM=${macro}-${meso}-${micro}
OBV=${localDir}${MMM}/backup.version
if ! [ -d ${localDir}${MMM} ]; then
    echo "have to create missing ${localDir}${MMM}"
    mkdir ${localDir}${MMM}
fi
cp -a ${localDir}backup.version $OBV

micro=$(( 1 + $micro ))

# removing obsolete archives if needed:

if [ $micro -gt $maxMicro ]; then
    if [ $meso -gt 0 ]; then
	if [ $prevMeso -gt 1 ]; then
	    ppMeso=$(( $prevMeso - 1 ))
	    find "${localDir}"   -name "${ppMacro}-${ppMeso}-*" -not -name "${ppMacro}-${ppMeso}-0*" -exec rm -r {} \;
	    find "${remoteDir}"  -name "${ppMacro}-${ppMeso}-*" -not -name "${ppMacro}-${ppMeso}-0*" -exec rm -r {} \;
	fi
    fi
    meso=$(( 1 + $meso ))
    micro=0
    prevMicro=0
fi

if [ $meso -gt $maxMeso ]; then
    if [ $macro -gt 0 ]; then
	if [ $prevMacro -gt 1 ]; then
	    ppMacro=$(( $prevMacro - 1 ))
	    find "${localDir}"  -name "${ppMacro}-*" -not -name "${ppMacro}-0-0*" -exec rm -r {} \;
	    find "${remoteDir}" -name "${ppMacro}-*" -not -name "${ppMacro}-0-0*" -exec rm -r {} \;
	fi
    fi
    macro=$(( 1 + $macro ))
    micro=0
    meso=0
    prevMicro=0
    prevMeso=0
fi

# to be changed to local archive copy →
previousArchive=${remoteDir}${prevMacro}-${prevMeso}-${prevMicro}.gpg
echo "debug: previousArchive=$previousArchive"
fi

MMM=${macro}-${meso}-${micro}
echo "${macro} ${meso} ${micro}" > ${PBD}
touch -r $OBV ${PBD}
chmod a+r ${PBD}

if ! [ -d ${localDir}${MMM} ]; then
    mkdir ${localDir}${MMM} && chgrp tmp ${localDir}${MMM} && chmod go+rwx ${localDir}${MMM}
fi

if [ ${meso} -eq 0 ] && [ ${micro} -eq 0 ]; then
    echo "it is major backup, so creating ${MMM}/previous"
    zcat ${localDir}*-*-*/*.list.gz | uniq -u > ${localDir}${MMM}/previous
    chmod a+r ${localDir}${MMM}/previous ${localDir}${MMM}/new
fi

# the following loop creates list of (text and not too large) files to be archieved:
# if [ $meso -gt $maxMeso ]; then
#     knownFNs=`mktemp -p ${localDir}`
# fi

for file in $sysFiles; do
    if [ ${meso} -eq 0 ] && [ ${micro} -eq 0 ]; then
	process_object $file 1
    else
	process_object $file
    fi
done

RL=${localDir}${MMM}/root.list
if [ -f $RL ]; then
    chgrp tmp $RL
    tar cfv ${localDir}${MMM}.tar --files-from=$RL
    gzip $RL
fi
# ← some of those files are readable only for root, and this is why this script runs with root privileges

GPG="gpg --batch --yes --pinentry-mode loopback --passphrase \"$password\" -o"

# user files will be selected by elisp (emacs):
for user in $users; do
    echo "selecting files for $user"
    su $user -c "cd \$HOME; emacsclient -e \"(progn (require 'backup) (backup-do))\"  || emacs -q --no-site-file --batch -l ~/.emacs.d/start.el -l backup -f backup-do"
    if [ -f ${localDir}${MMM}/${user}.list ]; then
	tar uf ${localDir}${MMM}.tar --files-from=${localDir}${MMM}/${user}.list
	if `mkdir ${remoteDir}lock`
	then
	    $GPG ${remoteDir}${MMM}.${user}.gpg --symmetric ${localDir}${MMM}/${user}.list
	    gzip ${localDir}${MMM}/${user}.*
	    chgrp tmp ${localDir}${MMM}/${user}.*
	    rmdir ${remoteDir}lock
	else
	    echo "cannot upload list of files because ${remoteDir}lock exists"
	fi
    fi
done

touch ${PBD}

if [ -f ${localDir}${MMM}/previous ]; then
    gzip ${localDir}${MMM}/previous
fi

if [ -f ${localDir}${MMM}/new ]; then
    gzip ${localDir}${MMM}/new
fi

echo "copying archieve to the cloud"

if `mkdir ${remoteDir}lock`; then # checkinng if remote dir is mounted
    $GPG ${remoteDir}${MMM}.gpg --symmetric ${localDir}${MMM}.tar && \
	rmdir ${remoteDir}lock && rmdir ${lock} && echo "backup finished" || echo "something went wrong"
else
    echo "cannot upload archive because ${remoteDir}lock exists"
fi
# it is useful to have local archive copy:
bzip2 ${localDir}${MMM}.tar
chmod o-r ${localDir}${MMM}.tar.bz2
else
    echo "DOING NOTHING because lock file/dir $lock detected"
fi
